///|
pub(all) enum Path {
  WPath(WinPath)
  UPath(UnixPath)
} derive(ToJson, Hash, Eq)

///|
/// [Microsoft Naming a Volume](https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-volume)
/// [Microsoft Naming Files, Paths, and Namespaces](https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file)
/// [Microsoft Maximum Path Length Limitation](https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation)
pub struct WinPath {
  prefix : WinPrefix?
  directory : WinDirectory
  file : WinFile?
} derive(ToJson, Hash, Eq)

///|
/// 
/// #### Verbatim Prefix
/// 
/// refer to [Microsoft Win32 File Namespaces](https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#win32-file-namespaces)
/// > For file I/O,
/// > the "\\?\" prefix to a path string tells the Windows APIs to disable all string parsing and to send the string that follows it straight to the file system.
/// 
/// #### Windows Encoding 
/// 
/// refer to [Microsoft Path Unicode Normalization](https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation)
/// 
/// > There is no need to perform any Unicode normalization on path and file name strings for use by the Windows file I/O API functions 
/// > because the file system treats path and file names as an opaque sequence of WCHARs.
/// > Any normalization that your application requires should be performed with this in mind, 
/// > external of any calls to related Windows file I/O API functions.
/// 
/// #### Relative Paths Cannot use Verbatim Prefix
/// 
/// refer to [Microsoft Verbatim restriction](https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation)
/// 
/// > Because you cannot use the "\\?\" prefix with a relative path, 
/// > relative paths are always limited to a total of MAX_PATH characters.
/// 
pub(all) enum WinPrefix {
  /// Syntax: `\\?\<SYMLINK>`
  ///
  /// Example: `\\?\GLOBALROOT`
  Verbatim(symlink~ : String)
  /// Syntax: `\\?\UNC\<SERVER>\<SHARE>`
  ///
  /// Example: `\\?\UNC\server\share`
  VerbatimUNC(hostname~ : String, shared_folder~ : String)
  /// Syntax: `\\?\<L>:\`
  ///
  /// Example: `\\?\C:\`
  VerbatimVolumeLetter(Char)
  /// Syntax: `\\?\Volume{<GUID>}\`
  ///
  /// Example: `\\?\Volume{26a21bda-a627-11d7-9931-806e6f6e6963}\`
  ///
  /// Warning: this letter is case-insensitive.
  ///
  /// [Microsoft Enumerating Volume GUID Paths](https://learn.microsoft.com/en-us/windows/win32/fileio/enumerating-unique-volume-names)
  VerbatimVolumeGUID(String)
  /// Syntax: `\\.\<DEVICE>`
  ///
  /// Example: `\\.\COM56"`
  ///
  /// [Microsoft Win32 Device Namespaces](https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#win32-device-namespaces)
  DeviceNS(device~ : String)
  /// Syntax: `\\<SERVER>\<SHARE>`
  ///
  /// Example: `\\server\share`
  UNC(hostname~ : String, shared_folder~ : String)
  /// Syntax: `<L>:\`
  ///
  /// Example: `C:\`
  ///
  /// Warning: this letter is case-insensitive.
  VolumeLetter(Char)
} derive(ToJson, Hash, Eq)

///|
let windows_reserved_names : FixedArray[String] = [
  ///
  "CON", "PRN", "AUX", "NUL",
  ///
   "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
  ///
   "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9",
  ///
   "COM\u00b9", "COM\u00b2", "COM\u00b3",
  ///
   "LPT\u00b9", "LPT\u00b2", "LPT\u00b3",
]

///|
fn is_windows_reserved_character(ch : Char) -> Bool {
  match ch {
    '<'
    | '>'
    | ':'
    | '\"'
    | '/'
    | '\\'
    | '|'
    | '?'
    | '*'
    | '\u0000'
    | '\u0001'..='\u0031' => true
    _ => false
  }
}

///|
pub struct UnixPath {
  is_absolute : Bool
  directory : UnixDirectory
  file : UnixFile?
} derive(ToJson, Hash, Eq)

///|
pub struct File[Component] {
  base : Component
  extension : String
} derive(ToJson, Hash, Eq)

///|
pub typealias Directory[WinPathComponent] as WinDirectory

///|
pub typealias Directory[UnixPathComponent] as UnixDirectory

///|
pub typealias File[WinPathComponent] as WinFile

///|
pub typealias File[UnixPathComponent] as UnixFile

///|
struct Directory[Component](FixedArray[Component]) derive(ToJson, Hash, Eq)

///|
pub fn[T] Directory::op_get(self : Directory[T], index : Int) -> T = "%fixedarray.get"

///|
pub fn[T] Directory::length(self : Directory[T]) -> Int = "%fixedarray.length"

///|
pub fn[T] Directory::iter(self : Directory[T]) -> Iter[T] {
  FixedArray::iter(self.0)
}

///|
struct WinPathComponent(String) derive(ToJson, Hash, Eq)

///|
struct UnixPathComponent(String) derive(ToJson, Hash, Eq)

///|
trait PlatformPath {
  from(s : String) -> Self raise InvalidPathError
}

///|
let windows_reserved_names_set : Set[String] = Set::from_iter(
  windows_reserved_names.iter(),
)

///|
pub impl PlatformPath for WinPathComponent with from(s) {
  guard !s.is_empty() else {
    raise WinInvalidPath(start=0, message="empty path component")
  }
  guard !windows_reserved_names_set.contains(s) else {
    raise WinInvalidPath(start=0, message="reserved name")
  }
  for i, ch in s {
    guard !is_windows_reserved_character(ch) else {
      raise WinInvalidPath(start=i, message="reserved character")
    }
    guard ch != '\\' else {
      raise WinInvalidPath(start=i, message="`\\` in path componnent")
    }
  }
  s
}

///|
pub impl PlatformPath for UnixPathComponent with from(s) {
  guard !s.is_empty() else {
    raise UnixInvalidPath(start=0, message="empty path component")
  }
  guard s.get_char(0) == Some('-') else {
    raise UnixInvalidPath(start=0, message="not portable in posix standard")
  }
  for i, ch in s {
    guard ch != '/' else {
      raise UnixInvalidPath(start=i, message="`/` in path component")
    }
    guard ch != '\u0000' else {
      raise UnixInvalidPath(start=i, message="null character in path component")
    }
  }
  s
}

///|
pub(all) suberror InvalidPathError {
  WinInvalidPath(start~ : Int, message~ : String)
  UnixInvalidPath(start~ : Int, message~ : String)
}

///|
pub(all) suberror ParseError {
  WinParseError(start~ : Int)
  UnixParseError(start~ : Int)
}

///|
pub fn WinPath::is_absolute(self : WinPath) -> Bool {
  self.prefix is Some(_)
}

///|
pub fn WinPath::is_relative(self : WinPath) -> Bool {
  self.prefix is None
}

///|
pub fn UnixPath::is_absolute(self : UnixPath) -> Bool {
  self.is_absolute
}

///|
pub fn UnixPath::is_relative(self : UnixPath) -> Bool {
  !self.is_absolute
}

///|
pub fn Path::is_absolute(self : Path) -> Bool {
  match self {
    UPath(path) => path.is_absolute()
    WPath(path) => path.is_absolute()
  }
}

///|
pub fn Path::is_relative(self : Path) -> Bool {
  match self {
    UPath(path) => path.is_relative()
    WPath(path) => path.is_relative()
  }
}
